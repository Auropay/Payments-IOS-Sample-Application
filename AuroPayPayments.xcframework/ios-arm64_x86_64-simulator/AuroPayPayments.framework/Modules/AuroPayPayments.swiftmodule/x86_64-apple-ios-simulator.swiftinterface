// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AuroPayPayments
import AVFoundation
import AVKit
import Accelerate
import AudioToolbox
import CarPlay
import CommonCrypto
import CoreGraphics
import CoreImage
import CoreText
import DeveloperToolsSupport
import Foundation
import ImageIO
import MobileCoreServices
import QuartzCore
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit.UIFont
import UIKit
import Vision
import VisionKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
infix operator |> : AdditionPrecedence
@objc final public class APTheme : ObjectiveC.NSObject {
  @objc public init(primaryColor: UIKit.UIColor, primaryTextColor: UIKit.UIColor, secondaryColor: UIKit.UIColor, secondaryTextColor: UIKit.UIColor)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
final public class Auropay : ObjectiveC.NSObject {
  @objc final public func doPayment(displayViewController: UIKit.UIViewController, amount: Swift.Double, andDelegate delegate: any AuroPayPayments.APPaymentCompletionProtocol, referenceNumber: Swift.String? = nil, askCustomerDetails: Swift.Bool = false)
  @objc final public func doPayment(displayViewController: UIKit.UIViewController, amount: Swift.Double, andDelegateWithData delegate: any AuroPayPayments.APPaymentCompletionProtocolWithData, referenceNumber: Swift.String? = nil, askCustomerDetails: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
final public class AuroPayBuilder : ObjectiveC.NSObject {
  @objc final public func subDomainId(_ merchantID: Swift.String) -> AuroPayPayments.AuroPayBuilder
  @objc final public func accessKey(_ accessKey: Swift.String) -> AuroPayPayments.AuroPayBuilder
  @objc final public func secretKey(_ secretKey: Swift.String) -> AuroPayPayments.AuroPayBuilder
  @objc final public func customerProfile(_ customerProfile: AuroPayPayments.CustomerProfile) -> AuroPayPayments.AuroPayBuilder
  @objc final public func addEventListener(_ eventHandler: @escaping ((Swift.String, Swift.String) -> Swift.Void)) -> AuroPayPayments.AuroPayBuilder
  @objc final public func theme(_ theme: AuroPayPayments.APTheme?) -> AuroPayPayments.AuroPayBuilder
  @objc final public func country(_ country: AuroPayPayments.Country) -> AuroPayPayments.AuroPayBuilder
  @objc final public func showReceipt(_ flag: Swift.Bool) -> AuroPayPayments.AuroPayBuilder
  @objc final public func allowCardScan(_ flag: Swift.Bool) -> AuroPayPayments.AuroPayBuilder
  @objc final public func build() -> AuroPayPayments.Auropay
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13.0, *)
@objc public protocol APPaymentCompletionProtocol : AuroPayPayments.AuroPayPaymentResultProtocol {
  @objc func onPaymentSuccess(_ orderId: Swift.String, transactionStatus: Swift.Int, transactionId: Swift.String)
  @objc func onPaymentError(_ message: Swift.String)
}
@available(iOS 13.0, *)
@objc public protocol APPaymentCompletionProtocolWithData : AuroPayPayments.AuroPayPaymentResultProtocol {
  @objc func onPaymentSuccess(_ paymentData: AuroPayPayments.PaymentResultData)
  @objc func onPaymentError(_ message: Swift.String, _ paymentData: AuroPayPayments.PaymentResultData?)
}
@available(iOS 13.0, *)
@objc public protocol AuroPayPaymentResultProtocol {
}
@objc @available(iOS 13.0, *)
final public class CustomerProfile : ObjectiveC.NSObject {
  @objc public init(title: Swift.String, firstName: Swift.String, middleName: Swift.String, lastName: Swift.String, phone: Swift.String, email: Swift.String)
  @objc deinit
}
@objc @available(iOS 13.0, *)
final public class PaymentResultData : ObjectiveC.NSObject {
  @objc final public var orderId: Swift.String
  @objc final public var transactionStatus: Swift.Int
  @objc final public var transactionId: Swift.String
  @objc final public var transactionDate: Swift.String
  @objc final public var referenceNo: Swift.String
  @objc final public var processMethod: Swift.Int
  @objc final public var reasonMessage: Swift.String
  @objc final public var amount: Swift.Double
  @objc final public var convenienceFee: Swift.Double
  @objc final public var taxAmount: Swift.Double
  @objc final public var discountAmount: Swift.Double
  @objc final public var captureAmount: Swift.Double
  @objc public init(orderId: Swift.String, transactionStatus: Swift.Int, transactionId: Swift.String, transactionDate: Swift.String, referenceNo: Swift.String, processMethod: Swift.Int, reasonMessage: Swift.String, amount: Swift.Double, convenienceFee: Swift.Double, taxAmount: Swift.Double, discountAmount: Swift.Double, captureAmount: Swift.Double)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor dynamic open func iq_parentContainerViewController() -> UIKit.UIViewController?
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIViewController {
  @objc @available(*, unavailable, renamed: "iq_parentContainerViewController()")
  @_Concurrency.MainActor(unsafe) dynamic open func parentIQContainerViewController() -> UIKit.UIViewController?
}
@objc public enum Country : Swift.Int {
  case IN
  case US
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.Bundle : @unchecked Swift.Sendable {
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
extension AuroPayPayments.Country : Swift.Equatable {}
extension AuroPayPayments.Country : Swift.Hashable {}
extension AuroPayPayments.Country : Swift.RawRepresentable {}
